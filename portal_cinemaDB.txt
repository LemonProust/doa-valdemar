CREATE DATABASE IF NOT EXISTS `portal_cinema`;

USE `portal_cinema`;

CREATE TABLE IF NOT EXISTS `portal_cinema`.`user` (
  `user_id` INT UNSIGNED AUTO_INCREMENT,
  `first_name` VARCHAR(50) NOT NULL,
  `last_name` VARCHAR(50) NOT NULL,
  `email` VARCHAR(50) NULL DEFAULT NULL,
  `password` VARCHAR(50) NOT NULL,
  `contato` VARCHAR(25),
  `address` VARCHAR(100),
  `birth_date` DATE NOT NULL,
  `nacionality` VARCHAR(50) NOT NULL,
  `create_date` DATETIME NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `idx_user_last_name` (`last_name` ASC),
  PRIMARY KEY (`user_id`));


CREATE TABLE IF NOT EXISTS `portal_cinema`.`studio` (
  `studio_id` INT UNSIGNED AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `birth_date` DATE NOT NULL,
  `country` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`studio_id`));

CREATE TABLE IF NOT EXISTS `portal_cinema`.`actor` (
  `actor_id` INT UNSIGNED AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `nacionality` VARCHAR(50) NOT NULL,
  `foto` VARCHAR(100) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `idx_actor_last_name` (`last_name` ASC),
  PRIMARY KEY (`actor_id`));


CREATE TABLE IF NOT EXISTS `portal_cinema`.`director` (
  `director_id` INT UNSIGNED AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `nacionality` VARCHAR(50) NOT NULL,
  `foto` VARCHAR(100) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `idx_director_last_name` (`last_name` ASC),
  PRIMARY KEY (`director_id`));


CREATE TABLE IF NOT EXISTS `portal_cinema`.`opinion` (
  `opinion_id` INT UNSIGNED AUTO_INCREMENT,
  `movie_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `comment` VARCHAR(45) NOT NULL,
  `note` DECIMAL(2,1) NOT NULL DEFAULT 7.0,
  `create_date` DATETIME NOT NULL,
  `last_update` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `idx_title` (`movie_id` ASC),
  PRIMARY KEY (`opinion_id`));
  

CREATE TABLE IF NOT EXISTS `portal_cinema`.`movie` (
  `movie_id` INT UNSIGNED AUTO_INCREMENT,
  `group_movie_actor_id` INT UNSIGNED NOT NULL,
  `group_movie_director_id` INT UNSIGNED NOT NULL,
  `studio_id` INT UNSIGNED NOT NULL,
  `category_id` INT UNSIGNED NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `original_title` VARCHAR(255) NOT NULL,
  `cartaz` VARCHAR(255) NULL,
  `description` TEXT NULL,
  `release_year` YEAR NULL,
  `language` VARCHAR(100) NOT NULL,
  `original_language` VARCHAR(50),
  `length` SMALLINT UNSIGNED NULL DEFAULT 90,
  `rating` ENUM('G','PG','PG-13','R','NC-17') NULL DEFAULT 'G',
  `special_features` SET('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `idx_title` (`title` ASC),
  PRIMARY KEY (`movie_id`));

CREATE TABLE IF NOT EXISTS `portal_cinema`.`group_movie_actor` (
  `group_movie_actor_id` INT UNSIGNED AUTO_INCREMENT,
  `actor_id` INT UNSIGNED NOT NULL,
  `movie_id` INT UNSIGNED NOT NULL,
  `actor_movie_name` VARCHAR(50) NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updated last_update
  PRIMARY KEY (`group_movie_actor_id`),
  INDEX `idx_fk_group_movie_actor` (`group_movie_actor_id` ASC),
  INDEX `fk_movie_actor_actor_idx` (`actor_id` ASC),
  CONSTRAINT `fk_movie_actor_actor`
    FOREIGN KEY (`actor_id`)
    REFERENCES `portal_cinema`.`actor` (`actor_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_movie_actor_film`
    FOREIGN KEY (`movie_id`)
    REFERENCES `portal_cinema`.`movie` (`movie_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `portal_cinema`.`group_movie_director` (
  `group_movie_director_id` INT UNSIGNED NOT NULL,
  `director_id` INT UNSIGNED NOT NULL,
  `movie_id` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`group_movie_director_id`),
  INDEX `idx_fk_movie_id` (`group_movie_director_id` ASC),
  INDEX `fk_movie_director_director_idx` (`director_id` ASC),
  CONSTRAINT `fk_movie_director_director`
    FOREIGN KEY (`director_id`)
    REFERENCES `portal_cinema`.`director` (`director_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_movie_director_film`
    FOREIGN KEY (`movie_id`)
    REFERENCES `portal_cinema`.`movie` (`movie_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);


-- Categoria ou genero do filme

CREATE TABLE IF NOT EXISTS `portal_cinema`.`movie_category` (
  `movie_category_id` INT UNSIGNED AUTO_INCREMENT,
  `category` VARCHAR(50) NOT NULL,
  `comment` VARCHAR(100),
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`movie_category_id`));

-- Adicionando CONSTRAINTS a tabela opinion

ALTER TABLE `portal_cinema`.`opinion` 
  ADD CONSTRAINT `fk_user_opinion` FOREIGN KEY (`user_id`) 
    REFERENCES `portal_cinema`.`user`(`user_id`) 
	ON DELETE RESTRICT
    ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_movie_opinion` FOREIGN KEY (`movie_id`)
	REFERENCES `portal_cinema`.`movie`(`movie_id`);
    
 -- Adicionando CONSTRAINTS a tabela filme
 
ALTER TABLE `portal_cinema`.`movie` 
  ADD CONSTRAINT `fk_movie_group_movie_actor`
    FOREIGN KEY (`group_movie_actor_id`)
    REFERENCES `portal_cinema`.`group_movie_actor` (`group_movie_actor_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_movie_group_movie_director`
    FOREIGN KEY (`group_movie_director_id`)
    REFERENCES `portal_cinema`.`group_movie_director` (`group_movie_director_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_movie_studio`
    FOREIGN KEY (`studio_id`)
    REFERENCES `portal_cinema`.`studio` (`studio_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_movie_category`
    FOREIGN KEY (`category_id`)
    REFERENCES `portal_cinema`.`movie_category` (`movie_category_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;